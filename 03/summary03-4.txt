
 ◆ 연산자 깊게 알아보기

 1. 할당 연산자 응용하기
 할당 연산자(Assignment Operator, =)란 자바스크립트에서 가장 많이 사용하는 연산자 입니다.

  var x = 10;
  x += 10;
  var y = 20;
  y += x;

 처음 보는 식이지만 풀어서 생각하면 어렵지 않을 것입니다.

  var x = 10;
  x = 10 + x;
  20

  var y = 20;
  y = y + x;
  40

 2. 더하기 연산자와 연결 연산자 구분하기
 + 연산자는 우리가 덧셈을 수행하는 연산자라고 생각하지만 사실 피연산자로 문자열이 오는 경우
 덧셈 연산자가 아니라 연결 연산자로서 연산을 수행합니다. 두 수를 더 할때 + 연산자를 사용하지만
 두 개 이상의 문자열을 연결할 때에도 + 연산자를 사용한다는 것을 기억하여 구별할 줄 알아야 합니다.

  ※ [ES6] 템플릿 문자열
  ES6 버전부터는 문자열 안에 값을 채우는 방법인 '템플릿 문자열'이 추가되었습니다. + 연산자를 사용해
  값과 문자열을 연결하는 방식이 아니라 문자열 안에 값을 그냥 끼워 넣는 형태가 된 것입니다.
  템플릿 문자열을 사용하려면 문자열을 백 쿼트(``)로 묶고, 값이 들어가는 부분은 ${} 를 사용해 표시합니다.
  백 쿼트(Back quote)는 그레이브(Grave)나 백틱(Back Tick)이라고도 부릅니다.

 3. 문자형과 숫자형의 연산 이해하기
 위에서 문자열과 문자열을 더하면 두 문자열이 연결된다는 것을 확인했습니다. 그렇다면 문자열과 숫자를 더하면
 어떻게 될까요?

  ⑴ 더하거나 뺄 때
  100과 "50"을 더하면 둘을 연결한 문자열 "10050"이 결과값으로 나오게 됩니다. 즉 + 가 연결 연산자로 사용되었습니다.
  그러면 반대로 뺄 때는 어떨까요? 100 - "50"을 수행하면 숫자 50이 결과값이 됩니다. 이렇듯 자바스크립트에서는
  숫자형과 문자형 자료를 더하거나 빼면 자동으로 결과값의 자료형을 지정합니다. 따라서 문자열과 숫자를 연산할 때
  어떤 결과값이 나오는지 꼭 기억해서 원하는 값이 나오도록 만들어야 합니다.

  ⑵ 곱하기와 나누기, 나머지 구하기
   var numVar = 100;
   var strVar = "50";
   numVar * strVar
   5000

   numVar / strVar
   2

   numVar % strVar
   0

 4. 비교 연산자 알아보기
 비교 연산자는 두 피연산자를 비교하여 참(true)이나 거짓(false)를 반환하는 연산자입니다.

  ⑴ == 와 !=
  == 는 두 값이 같은지 확인하고 같으면 true, 다르면 false 를 반환합니다.
  != 는 두 값이 다른지 확인하고 다르면 true, 같으면 false 를 반환합니다.

  ⑵ == 연산자와 ===
  ==와 === 연산자 모두 왼쪽과 오른쪽 값이 같은지 비교하는 연산자입니다. 그러나 중요한 차이점이 있는데
  == 연산자는 문자형 자료와 숫자형 자료가 있을 때 자동으로 자료형을 변환하여 비교합니다.
  그래서 10과 "10"을 비교할 때 ==을 사용하면 true 를 반환합니다. 하지만 === 연산자의 경우 형변환을 허용하지 않습니다.
  따라서 false 를 반환하게 됩니다. 따라서 만약 값을 비교할 때에는 == 보다 ===을 사용하는 것이 더 안전합니다.

   ※ 문자끼리 비교하기 - 아스키 값
   문자끼리 비교 연산자를 사용하여 비교하면 어떻게 될까요? 예를 들어 "a" 와 "b" 를 비교하거나 "A" 와 "a"를 비교하면?
   문자끼리의 비교를 이해하기 위해서는 아스키(ASCII)값이 무엇인지 이해해야 합니다.
   아스키 값이란 컴퓨터에서 문자형을 숫자형에 일대일로 대응시킨 값을 말합니다. 예를 들어 "A" 의 아스키 값은
   65이고 "a" 의 아스키 값은 97 입니다. 따라서 "A" > "a" 의 결과는 false 입니다.

