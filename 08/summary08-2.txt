
 ◆ DOM 요소에 접근하기

 1) DOM 요소에 접근하는 여러가지 방법
 CSS 에는 선택자(Selector) 개념이 있습니다. HTML 요소의 스타일을 선택하여 수정할 때 CSS 선택자를 사용하죠. 자바스크립트로
 DOM 요소에 접근할 때도 주로 선택자를 사용합니다.

  ① DOM 요소를 id 선택자로 접근하는 함수 - getElementById()
  자바스크립트에서는 태그의 id 속성을 이용해 DOM 요소에 접근할 수 있습니다.
  id 속성 값은 한 문서 안에서 유일하기 때문에 자주 사용합니다. CSS 선택자로 # 문자와 함께 id 속성을 선택한 것을 떠올려 보세요.
  DOM 요소에 접근할 때에도 마찬가지 방법을 사용합니다. 그리고 id 선택자를 이용하여 DOM 요소에 접근하는 함수가 바로
  getElementById() 입니다.

  document.getElementById("heading");

  지금은 제목 요소에 접근한 것입니다. 접근한 요소에 텍스트가 있다면 자바스크립트를 사용해 글자 색이나 크기 등 스타일을 수정할 수도 있습니다.
  다음은 제목을 누르면 접근한 요소의 글자 크기가 커지도록 자바스크립트 함수를 만든 것입니다. getElementById() 함수를 이용해 DOM 요소에
  접근하고, 이 요소를 누르면 (onclick) 함수가 작동합니다.

  document.getElementById("heading").onclick = function() {
      this.style.fontSize = '5em';
  };

  ② DOM 요소를 class 값으로 찾아내는 함수 - getElementsByClassName()
  태그의 id 값이 아닌 class 속성 값을 사용하여 DOM 요소에 접근하려면 getElementsByClassName() 함수를 사용합니다.
  그런데 이 함수의 이름을 자세히 보면 By 단어 앞에 복수를 뜻하는 's' 가 붙어 있습니다.
  CSS 에서 class 선택자는 id 선택자와 다르게 웹 문서 안에서 여러 번 사용할 수 있습니다. 그래서 getElementsByClassName() 함수는
  2개 이상의 웹 요소에 접근합니다. HTMLCollection 은 여러 개의 HTML 요소를 담고 있는(Collection) 자료 형식으로, 배열과 비슷합니다.

  document.getElementsByClassName("accent");

  그런데 이때 getElementsByClassName() 함수로 접근한 DOM 요소 중 1개의 요소에만 접근하고 싶을 수도 있습니다. 배열의 인덱스를 사용하면
  원하는 요소를 가져올 수 있는 것처럼 HTMLCollection 을 펼치면 원하는 요소 왼쪽에 인덱스 번호가 있습니다. 이를 통해 원하는 요소에 접근합니다.

  document.getElementsByClassName("accent")[0]

  그럼 이제 해당 요소에 밑줄을 그어볼까요?

  document.getElementsByClassName("accent")[0].style.textDecoration = "underline";

  ③ DOM 요소를 태그 이름으로 찾아내는 함수 - getElementsByTagName()
  id 나 class 선택자가 있는 DOM 요소는 앞서 설명한 방법으로 접근하면 됩니다. 하지만 id 나 class 선택자가 없는 DOM 요소에는 어떻게 접근해야 할까요?
  이 경우에는 getElementsByTagName() 함수를 사용하여 태그 이름을 찾아 DOM 요소에 접근하면 됩니다. 이 함수의 이름에도 's'가 붙어 있습니다.
  즉 이 함수도 여러 DOM 요소를 모두 찾아 접근합니다.

  document.getElementsByTagName("h2");

  다음은 h2 태그 이름으로 접근한 DOM 요소 중 첫 번째 요소의 배경색을 바꾼 것입니다.
  document.getElementsByTagName("h2")[0].style.color = "red";

  ④ DOM 요소를 다양한 방법으로 찾아주는 함수 - querySelector(), querySelectorAll()

  이번에는 id, class 값을 사용해도 되고 태그 이름을 사용해도 돠ㅣ는 querySelector() 함수와 querySelectorAll() 함수에 대해 알아봅니다.
  두 함수는 접근하는 DOM 요소 개수에만 차이가 있을 뿐 사용 방법은 같습니다.

  두 함수는 id, class 값을 사용해도 되고 태그 이름을 사용해도 됩니다. 그러나 id 나 class 는 어떻게 입력해야 할까요? CSS 선택자를 사용한 방법을
  그대로 사용하면 됩니다. 즉 class 값 앞에는 마침표(.)를, id 값 앞에는 샵(#)을 붙입니다. 태그 이름은 기호 없이 태그 이름만 사용하면 됩니다.

  ※ querySelector() 함수와 함께 class 선택자나 태그 이름을 사용할 때는 여러 요소 중 첫 번째 요소에만 접근할 수 있습니다.

  document.querySelector("#heading"); //id 선택자
  document.querySelectorAll(".accent"); // class 선택자

  그런데 이번에 반환되는 값은 HTMLCollection 이 아니라 NodeList 입니다. 당황할 필요는 없습니다. NodeList 는 HTMLCollection 과 같은 방법으로
  다룰 수 있습니다. 즉 NodeList 는 여러 개의 노드를 모아 놓은 것으로 배열과 비슷하다고 생각하면 됩니다.

  document.querySelectorAll(".accent")[1].style.backgroundColor = "blue";

  ※ getElementById() 함수와 querySelector() 함수의 차이
  id 선택자가 있는 웹 요소에 접근할 때 getElementById() 함수와 querySelector() 함수 둘 다 사용할 수 있습니다.
  그렇다면 이 두 함수의 차이는 무엇일까요?

  getElementById(), getElementsByClassName(), getElementsByTagName() 함수에는 'Element' 라는 단어가 들어있습니다.
  이름에서 알 수 있다 싶이 이 함수들은 DOM 의 노드 중에서 요소 노드까지만 접근할 수 있습니다. 반면에 querySelector() 함수는
  요소 노드 뿐 아니라 텍스트 노드와 속성 노드까지 접근할 수 있습니다.
  자바스크립트 프로그램에서 웹 요소 정도만 변경한다면 getElement~ 함수를 사용하면 되고 웹 요소 뿐만 아니라 요소의 텍스트나
  속성을 변경, 새로운 노드를 추가하고 싶다면 querySelector() 함수를 사용합니다.



