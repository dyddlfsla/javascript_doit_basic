
 ◆ DOM 에서 이벤트 처리하기

 앞서 이벤트 처리에 대해 간단히 알아본 적이 있습니다. 이번에는 앞서 배운 것들을 다시 한번 복습해보고
 addEventListener() 함수를 사용하는 방법도 학습해봅니다.

 1) 이벤트 처리 방법 복습하기
  ① HTML 태그 안에서 이벤트 처리기 연결하기
  이벤트가 발생하는 HTML 태그 안에 직접 이벤트 처리기를 추가하는 방법입니다.

  	<div id="container">
  		<img id="pic" src="images/girl.png" alt="" onclick="changePic()">
  	</div>
  	<script>
  		var pic = document.querySelector('#pic');
  		function changePic() {
  			pic.src = "images/boy.png";
  		}
    </script>

  위와 같이 changePic() 함수를 선언한 후 <img> 태그 안에 onclick="changePic()" 와 같이 함수를 연결할 수 있습니다.
  이미지를 클릭할 때마다 해당 함수가 호출됩니다.

  이 방법은 HTML 태그와 자바스크립트 소스가 섞여 있는 형태라서 중간에 이벤트를 바꾼다거나 연결 함수를 바꾸려면 HTML 소스를 수정해야 합니다.
  HTML 소스가 길지 않고 간단한 경우 고려해 볼 수 있습니다. 이 방법은 하나의 요소에 하나의 이벤트 처리기만 사용할 수 있습니다.

  ② DOM 요소에 이벤트 처리기 연결하기
  이 방법은 이벤트가 발생한 웹 요소를 가져온 후 이벤트 처리기를 연결하는 방법입니다.

  <div id="container">
  		<img id="pic" src="images/girl.png" alt="">
  	</div>
  	<script>
      var pic = document.querySelector('#pic');
      pic.onclick = changePic;

  		function changePic() {
  			pic.src = "images/boy.png";
  		}
  	</script>

  	앞서 사용한 방법과 어떤 차이가 있는지 느껴지나요? 그렇습니다. 이벤트 처리기를 자바스크립트 소스에서 실행합니다.
  	이미지 요소를 가져와 pic 변수에 저장한 후 click 이벤트가 발생했을 때 changePic() 함수를 실행시킵니다.
  	DOM 요소에 이벤트 처리기를 연결한다는 것은 HTML 태그와 뒤섞이지 않고 자바스크립트를 사용한다는 점에서 좋지만
  	역시 하나의 요소에 하나의 이벤트 처리기만을 사용할 수 있습니다.


  2) addEventListener() 함수 사용하기
  지금까지 살펴본 방법은 하나의 요소에 하나의 이벤트 처리기만을 연결하는 것이었습니다. 그러나 한 요소에 여러 이벤트가
  발생했을 때 이를 동시에 처리하려면 어떻게 해야 할까요? 바로 DOM 의 addEventListener() 함수를 사용하면 됩니다.
  addEventListener 함수란 이벤트가 발생한 요소에 이벤트 처리기를 연결해주는 함수로 웹 문서에서 이미지나 텍스트 등
  특정 요소 뿐만 아니라 Document 객체나 Window 객체 어디에서든 사용할 수 있습니다.

  var pic = document.querySelector('#pic');
  pic.addEventListener("mouseover", changePic, false); // addEventListener 적용

  function changePic() {
    pic.src = "images/boy.png";
  }
   function originPic() {
    pic.src = "images/girl.png";
  }

  위의 코드를 살펴보면 다음과 같습니다.

  1. 이벤트 유형
  처리할 이벤트 유형을 지정합니다. 단 이 함수에서 이벤트 유형을 지정할 때는 'on' 을 붙이지 않고 'click' 이나 'mouseover' 처럼
  이벤트 이름만 사용합니다.

  2. 함수
  이벤트가 발생했을 때 실행할 명령을 나열하거나 따로 함수를 만들었다면 함수 이름을 지정합니다.

  3. 캡처 여부
  이벤트를 캡처링하는지 여부를 지정하는데 생략할 수 있습니다. true 이면 캡처링, false 면 버블링한다는 의미인데 기본값은 false 입니다.
  이벤트 캡처링은 DOM 의 부모노드에서 자식노드로 이벤트가 전달되는 것이고, 이벤트 버블링은 DOM 의 자식노드에서 부모노드로 이벤트가 전달되는 것입니다.

  addEventListener() 함수를 사용하면 하나의 요소에 여러 개의 이벤트 핸들러를 연결할 수 있습니다.
  위의 코드에 다음과 같은 내용을 추가해보세요.
  pic.addEventListener("mouseout", originPic, false);


