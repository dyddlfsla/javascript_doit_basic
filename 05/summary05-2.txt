
 ◆ 여러 번 사용할 수 있는 함수 만들기

 앞에서 만든 addNumber() 함수는 계산에 필요한 값을 10과 20으로 고정해 놓고 함수를 실행했습니다. 그렇기 때문에
몇 번을 실행해도 같은 결과가 나옵니다. 한번만 사용하고 말 함수라면 상관이 없지만, 프로그램 안에서 여러 번 사용할
함수라면 입력 값을 바꾸지 못한다는 것은 매우 불편한 일입니다. 그래서 함수를 잘 활용하기 위해서는 여러 입력 값을
넣을 수 있게 만들어야 합니다.

 사실 우리는 이미 이런 함수를 사용해왔습니다. alert()함수는 출력 값이 정해져 있지 않고 입력 값이 바뀔 때마다
다른 결과를 보여주었습니다. 이렇게 입력을 바꿔 여러 번 사용할 수 있는 성질을 함수의 '재사용성'이라고 합니다.

 1. 함수의 매개변수와 인수
 재사용성이 가능한 두 수를 더하는 함수 addNumber() 를 선언하기 위해서는 '값 2개가 필요하다'고 미리 지정해 두어야 합니다.
이렇게 함수를 실행하기 위해 필요하다고 지정하는 값을 매개변수(parameter)라고 합니다. 매개변수를 지정하려면 함수를 선언할 때
함수 이름 옆의 괄호() 안에 변수 이름을 넣어주면 됩니다. 매개변수는 함수를 실행하는 데 필요한 '입력'이라고 생각하세요.

 function addNumber(a, b) {
  var sum = a + b;
  console.log(sum);
 }

 2. 함수를 실행할 때 인수 넘겨주기
 매개변수가 있는 함수를 실행할 때는 함수 이름 옆의 괄호 안에 매개변수 할당 값을 넣어주어야 합니다. 여기에서 만든
addNumber() 함수는 매개변수가 2개이므로 addNumber() 함수를 호출할 때는 괄호 안에 2개의 값을 넣어주어야 하는겁니다.
이렇게 함수를 실행할 때 매개변수로 넘겨주는 값을 인수(Argument)라고 합니다.

 addNumber(2, 3);
 addNumber(10, 20);

 #[ES6] 함수의 매개변수 기본 값 지정하기
 ES6에는 매개변수가 있는 함수를 선언할 때 매개변수의 기본 값을 지정하는 기능도 생겼습니다. 예를 들어 다음과 같이
 함수 괄호() 안에 기본값을 지정하는 것입니다.

 function multiple(a, b = 5, c = 10) {
  return a * b + c;
 }

 multiple(5, 10, 20);
 multiple(10, 20);
 multiple(30);


 3. 함수의 return 문
 지금까지 만든 addNumber() 함수는 함수 안에서 계산 결과값을 표시했습니다. 이렇게 함수 안에서 결과값을 사용할 때도 있지만,
 두 수를 더한 결괏값을 다른 계산에 적용하거나 콘솔창이 아닌 다른 곳에 표시해야할 경우도 있습니다. 이렇게 함수를 실행한 후
 그 결괏값을 함수 밖으로 넘기는 것을 '함숫값을 반환한다(return)'라고 합니다. 반환 위치는 함수를 호출한 위치입니다.
 함수 결괏값을 반환할 때는 return 예약어를 사용하고 return 다음에 넘겨줄 값이나 변수 또는 식을 지정합니다.

 # return 문에 식을 사용할 수 있습니다.

 function addNumber(a, b) {
     var sum = a + b;
     return sum;
 }

 위 코드에서 sum 변수는 단순히 결과값을 저장했다가 반환하는 역할만 하기 때문에 중간 과정을 생략하고 즉시 반환할 수도 있습니다.
 즉 간단한 식일 경우에는 다음과 같이 return 문에서 식을 반환하도록 코드를 작성할 수 있습니다.

 function addNumber(a, b) {
  return a + b;
 }

 4. 변수의 적용 범위 알아보기
 자바스크립트에서 변수를 선언하고 사용할 때 변수가 적용되는 범위를 스코프(scope)라고 합니다. 변수가 어디부터 어디까지
 유효한지 그 범위를 가리키는 영역이죠. 자바스크립트 함수에서는 이 영역에 주의해야 합니다. 한 함수에서만 사용하고 다른 함수에서는
 사용할 수 없는 변수가 있는가 하면, 어느 함수에서나 다 사용할 수 있는 변수가 있습니다. 한 함수에서만 사용할 수 있는 변수를
 지역 변수 또는 로컬 변수(local variable)라고 하고, 스크립트 소스 전체에서 사용할 수 있는 변수를 전역 변수 또는 글로벌 변수(global variable)라고 합니다.

  ① 지역 변수
  지역 변수는 함수 안에서 선언하고 함수 안에서만 사용합니다. 함수를 선언할 때 지역 변수를 선언하려면 예약어 var 를 사용합니다.
  만약 변수 앞에 var 를 사용하지 않으면 전역 변수로 취급되니 주의해야 합니다.

  var myVar = 100;
  test();
  document.write("myVar is " + myVar);

  function test() {
    var myVar = 50;
  }

  test(); 함수 밖에 myVar 가 100으로 선언되어 있고 test() 함수 안에 myVar 가 50으로 다시 선언되어 있습니다.
  변수 이름 앞에 var 를 사용했으므로 함수 안에서만 사용할 수 있는 지역 변수입니다. 즉 test() 함수 안에서는 변수
  myVar 에 50이 할당되지만,test() 함수를 벗어나면 그 값은 무효가 됩니다. 그래서 위 코드를 실행해보면
  myVar 는 100으로 표시되는 것입니다. 지역 변수는 전역 변수에 영향을 주지 않습니다. 그러나 전역 변수와 지역 변수가 이름이
  같다면 나중에 헷갈릴수 있으므로 변수 이름은 겹치지 않게 하는 것이 좋습니다.

  ② 전역 변수
  전역 변수란 스크립트 소스 전체에서 사용할 수 있는 변수를 말합니다. 즉 <script> 와 </script> 사이에서 자유롭게 사용할 수 있는
  변수입니다. 여기에서 자유롭게 사용할 수 있다는 의미는 변수를 한 번 선언하고 나면 그 값을 계속 유지한다는 뜻입니다. 함수 안에서
  새롭게 전역 변수를 선언하려면 변수 앞에 var 를 사용하지 않으면 됩니다.



 #[ES6] 블록 변수
 ES6 버전부터는 전역 변수와 지역 변수 말고도 '블록 변수(Block variable)' 가 추가되었습니다. 블록 변수는 변수를 선언한 블록{()}
 에서만 유효하고 해당 블록을 벗어나면 사용할 수 없는 변수입니다.

 add("abc", "123");

 function add(a, b) {
  var local = a + b;
  if (b != null) {
    let block = b + a;
  }
  console.log(local); //지역 변수 local 출력.
  console.log(block); //에러. block 이 선언된 블록을 벗어났으므로 block 을 출력할 수 없음.
 }


 5. 익명 함수와 즉시 실행 함수
 지금까지는 함수를 선언하고 함수 이름을 사용해 함수를 실행했지만, 이것 외에도 함수를 실행하는 방법이 있습니다.
 이러한 것을 '함수 표현식'이라고 하는데, '익명 함수' 와 '즉시 실행 함수'에 대해 알아봅시다.

 ① 익명 함수
 '익명 함수'란 이름에서도 알 수 있듯이 이름이 없는 함수를 말합니다. 익명 함수를 선언할 때는 이름을 붙이지 않습니다.
  익명 함수는 함수 자체가 '식(expression)'이기 때문에 익명 함수를 변수에 할당할 수 있습니다. 또한 다른 함수의 매개변수로
  사용할 수도 있습니다.

  var add = function (a, b) {  //함수를 선언하고 변수 add 에 할당.
    return a + b;
  }

 이제 선언한 익명 함수를 실행해 보겠습니다. 기존 함수는 함수 이름을 사용해서 실행했습니다. 하지만 익명 함수는 이름이 없죠.
 어떻게 실행할까요? 앞에서 선언한 익명 함수를 변수 add 에 할당했습니다. 이 변수 add 를 함수 이름처럼 사용해서 익명 함수를
 실행합니다.

 var sum = add(10, 20); //익명 함수 실행 후 반환값을 다시 sum 에 저장.
 sum
 30

  ② 즉시 실행 함수
  함수를 식으로 표현하는 또 다른 방법은 '즉시 실행 함수'입니다. 즉시 실행 함수는 함수를 정의함과 동시에 실행하는 함수입니다.
  먼저 즉시 실행 함수의 표현 방법을 알아보겠습니다. 함수 선언 소스 전체를 괄호()로 한번 묶는다고 생각하면 쉽습니다. 그리고
  소스를 닫는 괄호 앞이나 뒤에 인수가 들어갈 괄호를 넣습니다. 즉시 실행 함수는 식이기 때문에 세미콜론(;)을 추가해야 합니다.

  (function () {
   ... //함수 내용
  })();   //함수를 괄호()로 한번 감싸고 마지막 닫는 괄호에 인수를 전달하는 괄호를 추가한다.

                  or

  (function () {
   ...
  }
  ());

  즉시 실행 함수는 변수에 할당할 수 있고, 함수에서 반환하는 값을 변수에 할당할 수도 있습니다.

  var result = (function () {
    return 10 + 20;
  }());
  console.log(result);

  매개변수가 필요한 함수라면 function 예약어 다음의 괄호안에 매개변수를 넣고 함수를 정의합니다. 그리고 함수 끝에
  오는 괄호에는 실제 실행할 때 사용할 인수를 넣고 실행합니다.

  var result = (function (a, b) {
    return a + b;
  }(10, 20));

  console.log(result);


 #[ES6] 함수의 화살표 표기법
 ES6 부터는 => 표기법(화살표 표기법)을 사용해 함수를 좀 더 간단하게 사용할 수 있습니다. 이 방법은 이름이 없는 함수(익명함수)
 를 변수에 지정할 때 많이 사용합니다. function 예약어는 사용하지 않으며, 매개변수를 지정하지 않을 때에는 () 만 작성합니다.
 매개변수가 하나라면 () 없이 매개변수만 작성할 수 있습니다. 매개변수가 2개 이상이라면 기존 매개변수를 표시하듯이 하면 됩니다.

  let hi = () => "안녕하세요"; //매개변수가 없을 때 () 만 사용.
  hi();

  let greet = name => `${name}님 안녕하세요?`; //매개변수가 하나일 때는 괄호() 없이 가능.
  greet("경희");

  let add = (a, b) => a + b; // 매개변수가 2개 이상일 때에는 기존처럼 ()를 사용하여 작성.
  add(10, 20);












