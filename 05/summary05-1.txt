
 ◆ 여러 동작을 묶은 덩어리, 함수

 자바스크립트로 작성한 프로그램은 많은 명령을 순서대로 하나씩 처리합니다. 이때 프로그래머가 처리해야 할 과제에 따라
기능별로 여러 명령을 묶어 놓은 것을 '함수'라고 합니다. 즉, 함수란 특정 기능을 수행하는 소스 코드를 따로 묶어 놓은
덩어리라고 할 수 있습니다.

자바스크립트에서도 여러 함수가 미리 만들어져 있어서 개발자는 그 함수를 가져다 사용할 수 있습니다. 예를 들어
지난번 alert()로 알림을 표시한 것이 기억나나요? 바로 이 alert() 함수가 바로 자바스크립트에 내장된 함수입니다.
우리는 alert() 함수 내부가 어떻게 되어 있고 어떤 과정을 거쳐서 작동하는지 모릅니다. 그러나 alert() 함수를 사용하면
알림창이 뜬다는 것은 알고 있습니다. 따라서 이런 함수를 내부가 보이지 않는 블랙박스라고도 합니다. 사용자가 그 안의
내부를 알 필요는 없습니다. 그저 입력 값과 출력 값의 형태를 알고 가져다 사용하기만 하면 되는 것입니다.

 1. 함수를 정의하고 실행하기

 내장 함수 뿐만 아니라 프로그램을 작성하면서 필요한 기능, 특히 자주 사용할 것 같은 기능은 그 기능에 필요한 명령을 사용자가
직접 묶어서 함수로 만들 수 있습니다. 프로그램에서는 함수가 어떤 명령을 처리해야 할지 미리 알려주는 것을 '함수 선언'이라 하고
선언된 함수를 가져와 사용하는 것을 '함수 실행'이라고 합니다.

함수를 선언할 때에는 function 키워드를 사용하고, 중괄호({})안에 함수에서 실행할 여러 명령을 묶습니다. 예를 들어
10과 20을 더하는 함수로 다음 코드를 작성할 수 있습니다.
콘솔창을 열고 다음과 같이 입력해보세요.

 function addNumber() {
  var sum = 10 + 20;
  console.log(sum);
 }

addNumber() 함수를 선언했지만 아직 콘솔 창에 아무런 결과도 표시되지 않습니다. 함수를 실행하려면 함수를 실행하는 소스가
따로 필요하기 때문입니다.

 addNumber()

선언한 함수를 사용하기 위해선 위와 같이 함수 이름을 사용하며, 이것을 '함수를 호출한다.'라고 합니다. 이렇게 함수를 한번
선언해두면 자바스크립트 소스 안의 어디에서든 함수를 불러서 실행할 수 있습니다.


 # 함수 선언과 실행 순서
웹 브라우저에서 자바스크립트 소스를 해석할 때 함수 선언 부분을 가장 먼저 찾아서 해석합니다. 그래서 개발자가 원하는 어느 곳이든
함수를 선언해놓기만 하면, 선언된 위치와 상관없이 함수를 실행할 수 있습니다.

 function addNumber() {                        addNumber()

  ....                              또는        function addNumber() {
                                                ....
 }                                             }
 addNumber()

 즉 함수 선언 위치는 프로그램 흐름에 영향을 주지 않습니다. 그래서 보통 한 문서 안에 여러 함수를 선언했을 때 스크립트 소스의 앞부분
 이나 뒷부분에 함수 선언 소스를 모아 놓고 필요할 때마다 함수를 호출합니다.








