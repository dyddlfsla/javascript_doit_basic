
 ◆ Array 객체의 함수 알아보기

 Array 객체에는 배열을 다룰 수 있는 여러 함수가 내장되어 있는데, 이 중에서 자주 사용하는 함수의 기본 사용법부터 알아봅시다.

 배열과 관련된 함수를 사용할 때는 함수의 반환 값이 무엇인지, 기존 배열은 그대로 유지되는지, 아니면 추가하거나 삭제한 요소 때문에
 기존 배열이 바뀌는지를 이해를 하고 있어야 합니다.

 1) 둘 이상의 배열을 연결하는 concat() 함수
 concat() 함수는 기존의 배열에 또 다른 배열이나 값을 합쳐서 새로운 배열을 만드는 함수입니다. 예를 들어 다음과 같이
 nums 배열과 chars 배열이 있을 때, 다음과 같이 concat() 함수를 사용해 두 개의 배열을 연결해서 새로운 배열을 만들 수 있습니다.

 nums = ["1", "2", "3"];
 chars = ["a", "b", "c"];
 nums.concat(chars);
 ['1', '2', '3', 'a', 'b', 'c']

 concat() 함수를 사용할 때 nums 배열과 chars 배열 순서를 바꾸면 연결 순서가 달라집니다.

 chars.concat(nums);
 ['a', 'b', 'c', '1', '2', '3']

 그렇다면, 새로운 배열을 만드는데 사용되었던 nums 배열과 chars 배열은 어떻게 되었을까요? concat() 함수는 기존의 배열을 바탕으로
 '새로운 배열'을 만들어내므로 기존의 nums 나 chars 배열에 영향을 주지 않습니다.

 2) 배열 요소를 연결하는 join() 함수
 join() 함수는 배열 요소를 연결하는 함수입니다. 배열 요소를 연결해서 나열할 때 각 요소 사이에 넣을 구분 기호가 필요한데,
 join() 함수는 이 기호를 직접 지정할 수 있습니다. 만약 이 기호를 따로 지정하지 않는다면 기본값은 쉼표(,)가 됩니다.

 nums.join();
 '1,2,3'

 nums.join("-");
 '1-2-3'

 3) 새로운 요소를 추가하는 push() 함수와 unshift() 함수
 함수를 사용하면 기존 배열에 새로운 요소를 추가할 수도 있습니다. 이 때 배열의 맨 끝에 요소를 추가하려면 push() 함수를 사용하고
 배열의 맨 앞에 추가하려면 unshift() 함수를 사용합니다. 추가하는 요소는 하나일 수도 있고 두 개일수도 있습니다.
 이 경우, 함수를 실행한 후 반환 값은 숫자 5가 표시됩니다.

 앞에서 다룬 concat() 이나 join() 함수와 달리 push() 함수는 새로운 배열을 만드는 것이 아니라 기존의 배열을 수정하는 것입니다.

 var nums = ["1", "2", "3"];
 nums.push("4", "5"); //배열에 4, 5 항목을 추가
 5  // push() 함수의 리턴값으로 배열의 총 길이 반환

 이번에는 unshift() 함수를 이용해 배열에 요소를 추가해봅시다.
 nums.unshift("0");
 6 // unshift() 함수의 리턴값으로 배열의 총 길이 반환
 ['0', '1', '2', '3', '4', '5']

 push() 함수와 다르게 unshift() 함수는 배열의 맨 앞에 요소를 추가하게 됩니다.

 4) 배열에서 요소를 추출하는 pop() 함수와 shift () 함수
 배열에 새로운 요소를 추가하는 함수가 있다면 반대로 배열의 요소를 삭제하는 함수도 있겠지요.
 Array 객체에서 맨 뒤에 있는 요소를 추출할 때는 pop() 함수를, 맨 앞에 있는 요소를 추출할 때는 shift() 함수를 사용합니다.
 배열에서 요소를 추출하면 해당 요소가 배열에서 빠지면서 배열이 수정되기 때문에 배열에서 요소를 삭제할 때는 추출 함수를 사용합니다.

 var study = ["html", "css", "javascript"];
 study.pop();
 "javascript"
 [ "html", "css" ]

 pop() 함수는 study 배열에서 마지막에 있는 요소 "javascript" 를 추출합니다. 그렇게 되면 study 배열에는 html 과 css 요소만 남아있게 됩니다.
 pop() 함수의 반환값은 pop() 함수로 인해 추출된 요소입니다.

 pop() 함수가 배열의 마지막 요소를 추출하고 반환하는 반면, shift() 함수는 배열의 첫 요소를 추출하고 반환합니다.

 var js = ["es6+", "node", "react", "angular", "vue"];
 js.shift();
 "es6+"
 [ "node", "react", "angular", "vue" ]

 5) 원하는 위치의 요소를 삭제하거나 추가하는 splice() 함수
 앞에서 살펴본 push() 함수와 unshift() 함수는 배열의 맨 앞이나 맨 뒤에 새로운 요소를 추가하는 함수이고,
 pop() 함수와 shift() 함수는 배열의 맨 앞이나 맨 뒤에서 배열의 요소를 추출하는 함수였습니다. 만약
 배열의 맨 앞이나 맨 뒤가 아닌 중간 부분에 요소를 추가하거나 삭제하려면 어떻게 해야 할까요?
 그리고 한꺼번에 2개 이상의 요소를 추가하거나 삭제하려면 어떻게 해야 할까요? 이럴 때 사용하는 함수가 바로 splice() 함수입니다.

 splice() 함수는 괄호 안에 있는 인수에 따라 일정 구간의 요소를 삭제하고 새로운 요소를 추가하는 함수입니다. splice() 함수를 실행하면
 삭제한 구간의 요소들로 이루어진 새로운 배열을 결과값으로 반환합니다.

  ① 괄호() 안의 인수가 1개인 경우
  이때 괄호 안의 인수는 그 배열의 인덱스 값을 가리킵니다. 이 경우 splice() 함수는 인수가 가리키는 인덱스의 요소부터 배열의 끝 요소까지 삭제합니다.

  var numbers = [0, 1, 2, 3, 4, 5]
  numbers.splice(2)    // 인덱스 2부터 배열의 끝까지에 해당하는 배열 요소를 모두 삭제하고 결과값으로 반환
  numbers
  [0, 1] // numbers 배열에 남아있는 요소는 0, 1 두 개뿐


  ② 괄호() 안의 인수가 2개인 경우
  첫 번째 인수는 인덱스 값이고 두 번째 인수는 삭제할 개수입니다. 예를 들어, 다음과 같은 study 배열이 있을 때 study.splice(2, 1) 을 실행하면
  인덱스 값이 2인 요소로부터 1개의 요소를 삭제합니다.

  var study = ["html", "css", "web", "jquery"];
  study.splice(2, 1) // 인덱스 2번째 요소로부터 1개의 요소를 삭제함
  study
  [ "html", "css", "jquery" ] // web 삭제

  ③ 괄호() 안의 인수가 3개인 경우
  splice() 함수의 첫 번째 인수는 해당 배열에서 삭제를 시작할 위치, 두 번째 인수는 삭제할 개수를 알려줍니다. 그렇다면 세 번째 인수가 들어가면
  그것은 무엇을 의미할까요? 앞에서 splice() 함수에는 배열에 요소를 추가하는 기능도 있다고 했습니다. 즉 세 번째 인수부터는 앞서 삭제한 위치에
  새롭게 추가할 요소를 지정합니다. 예를 들어,

  var study = [ "html", "css", "jquery" ];
  study.splice(2, 1, "js") // 인덱스 2번째 요소로부터 1개의 요소를 삭제하고 "js" 요소를 새롭게 추가
  study
  [ "html", "css", "js" ]

  만약 여기서 기존의 배열 요소를 삭제하지 않고 새로운 요소를 추가 하는것만 하고 싶다면 삭제할 개수를 지정하는 두 번째 인수에 0을 지정하면 됩니다.

  var study = [ "html", "css", "jquery" ];
  study.splice(2, 0, "js"); // 인덱스 2번째 요소부터 0개를 삭제한 후 "js" 요소 추가
  study
  [ "html", "css", "js", "jquery" ] // 0개를 삭제하였으므로 실제로 삭제된 요소는 없고 인덱스 2번째 자리에 js 만 추가됨

  또 여기서 한 개의 요소만 추가하는 것이 아니라 여러 개의 요소를 추가하고 싶을 때는 어떻게 할까요?
  간단합니다. 세 번째 인수 자리에 추가하고 싶은 모든 요소들을 차례대로 써 넣으면 됩니다.

  var chars = ["a", "e", "f"];
  chars.splice(1, 0, "b", "c", "d"); // chars 배열의 인덱스 1번째 요소로부터 0개의 요소를 삭제하고 "b", "c", "d" 요소를 새롭게 추가함.
  chars
  [ "a", "b", "c", "d", "e", "f" ]


 6) 원하는 위치의 요소들을 추출하는 slice() 함수
 slice() 함수는 배열에서 요소를 꺼낸다는 점에서 앞에 나온 pop() 함수나 shift() 함수와 같아보이지만, 여러 개의 요소를 꺼낼 수 있다는 점이 다릅니다.
 slice() 함수는 시작 인덱스와 끝 인덱스를 지정해 그 사이의 요소를 꺼냅니다. 만약 끝 인덱스를 지정하지 않고 시작 인덱스만 지정할 경우
 시작 인덱스부터 배열 끝까지 추출합니다.(splice 와 동일)

 var colors = ["red", "green", "blue", "white", "black"];
 colors.slice(2) // 인덱스 2번째 요소부터 배열의 마지막까지 모두 추출.
 colors
 ['red', 'green', 'blue', 'white', 'black'] // 배열을 추출했다고 하더라도 기존 배열 colors 는 변경되지 않음

 만약 여기서 slice() 함수에 시작 인덱스와 끝 인덱스를 모두 지정하면 함수는 시작 인덱스부터 끝 인덱스 직전까지 요소를 추출합니다.
 주의할 것은 끝 인덱스까지가 아니라 끝 인덱스 '직전'까지 라는 점입니다. 예를 들어 colors 배열에서 두 번째 요소(인덱스 1)부터 네 번째 요소(인덱스 3)
 까지 추출해서 새로운 colors2 배열을 만드려면 slice(1, 4) 라고 지정합니다.

 var colors = ["red", "green", "blue", "white", "black"];
 var colors2 = colors.slice(1, 4);
 colors2
 ['green', 'blue', 'white']

 여기에서 주의할 점은 slice() 함수를 사용해서 요소를 추출했을 때 원래 배열은 변경되지 않는다는 점입니다.
 따라서 배열에서 특정 요소를 삭제하는 용도로 slice() 함수를 사용할 수 없다는 것입니다.

 배열에서 특정 위치의 요소를 활용한다는 점에서 splice() 함수와 slice() 함수는 같은 기능을합니다. 하지만 slice() 함수는
 원래 배열에 영향을 주지 않고, splice() 함수는 요소를 추가하거나 삭제하면 원래 배열 자체가 변경된다는 차이가 있습니다.
 따라서 배열에서 추출한 요소를 가지고 새로운 배열을 만들어 사용하겠다면 slice() 함수가 적당하고 배열에서 일부 요소를 삭제하겠다면
 splice() 함수가 적당합니다.





 



